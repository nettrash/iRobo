/*
	svcWSMobileBANK.h
	The interface definition of classes and methods for the WSMobileBANK web service.
	Generated by SudzC.com
*/
				
#import "Soap.h"
	
/* SOAP-сервис для реализации протокола ROBOKASSA на удаленных устройствах (iOS, Android, Windows Phone) */
	
/* Add class references */
				
#import "svcDeviceStatItem.h"
#import "svcCardStat.h"
#import "svcFavorite.h"
#import "svcCurrency.h"
#import "svcTopCurrency.h"
#import "svcRoumingMobileOperator.h"
#import "svcArrayOfString.h"
#import "svcRedirectTo.h"
#import "svcHistoryOperation.h"
#import "svcShopCatalogItem.h"
#import "svcShopItem.h"
#import "svcArrayOfMessage.h"
#import "svcMessage.h"
#import "svcSettings.h"
#import "svcArrayOfDeviceStatItem.h"
#import "svcArrayOfCard.h"
#import "svcCard.h"
#import "svcArrayOfFavorite.h"
#import "svcArrayOfCurrency.h"
#import "svcArrayOfParameter.h"
#import "svcArrayOfTopCurrency.h"
#import "svcArrayOfRoumingMobileOperator.h"
#import "svcArrayOfHistoryOperation.h"
#import "svcArrayOfCheck.h"
#import "svcArrayOfShopCatalogItem.h"
#import "svcArrayOfShopItem.h"
#import "svcArrayOfTerminal.h"
#import "svcTerminal.h"
#import "svcCharity.h"
#import "svcWSResponse.h"
#import "svcParameter.h"
#import "svcOperationState.h"
#import "svcCheck.h"

/* Interface for the service */
				
@interface svcWSMobileBANK : SoapService
		
	// Returns svcWSResponse*
	/* Получение настроек устройства */
	- (SoapRequest*) GetSettings: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform Device: (NSString*) Device;
	- (SoapRequest*) GetSettings: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform Device: (NSString*) Device;

	// Returns svcWSResponse*
	/* Сохранение настроек устройства */
	- (SoapRequest*) SaveSettings: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Phone: (NSString*) Phone EMail: (NSString*) EMail;
	- (SoapRequest*) SaveSettings: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Phone: (NSString*) Phone EMail: (NSString*) EMail;

	// Returns svcWSResponse*
	/* Установка/удаление пароля для входа в программу на устройстве */
	- (SoapRequest*) SetPassword: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Password: (NSString*) Password;
	- (SoapRequest*) SetPassword: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Password: (NSString*) Password;

	// Returns svcWSResponse*
	/* Проверка пароля для входа на устройстве */
	- (SoapRequest*) CheckPassword: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Password: (NSString*) Password;
	- (SoapRequest*) CheckPassword: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Password: (NSString*) Password;

	// Returns svcWSResponse*
	/* Начать проверку EMail */
	- (SoapRequest*) CheckEMail: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) CheckEMail: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Начать проверку телефона */
	- (SoapRequest*) CheckPhone: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) CheckPhone: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Закончить проверку телефона */
	- (SoapRequest*) ApprovePhone: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Code: (NSString*) Code;
	- (SoapRequest*) ApprovePhone: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Code: (NSString*) Code;

	// Returns svcWSResponse*
	/* Сохранить метку для уведомлений */
	- (SoapRequest*) SaveDeviceToken: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Token: (NSString*) Token;
	- (SoapRequest*) SaveDeviceToken: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Token: (NSString*) Token;

	// Returns svcWSResponse*
	/* Проверка корректности EMail */
	- (SoapRequest*) ValidateEMail: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE EMail: (NSString*) EMail;
	- (SoapRequest*) ValidateEMail: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE EMail: (NSString*) EMail;

	// Returns svcWSResponse*
	/* Проверка наличия новой версии */
	- (SoapRequest*) GetCurrentVersion: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform appName: (NSString*) appName;
	- (SoapRequest*) GetCurrentVersion: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform appName: (NSString*) appName;

	// Returns svcWSResponse*
	/* Проверка наличия новой версии Ex */
	- (SoapRequest*) GetCurrentVersionEx: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform appName: (NSString*) appName currentVersion: (NSString*) currentVersion deviceName: (NSString*) deviceName OSVersion: (NSString*) OSVersion;
	- (SoapRequest*) GetCurrentVersionEx: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Platform: (NSString*) Platform appName: (NSString*) appName currentVersion: (NSString*) currentVersion deviceName: (NSString*) deviceName OSVersion: (NSString*) OSVersion;

	// Returns svcWSResponse*
	/* Сброс всех настроек устройства */
	- (SoapRequest*) ClearDevice: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) ClearDevice: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Получение статистики по устройству */
	- (SoapRequest*) GetDeviceStat: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) GetDeviceStat: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Миграция на новые VENDOR_ID */
	- (SoapRequest*) ActivateVendorId: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;
	- (SoapRequest*) ActivateVendorId: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;

	// Returns svcWSResponse*
	/* Получение списка карт устройства */
    - (SoapRequest*) GetCards: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Hash: (NSString*) Hash NotIncludeRemoved: (BOOL)NotIncludeRemoved NotIncludeNotAuthorized: (BOOL)NotIncludeNotAuthorized;
	- (SoapRequest*) GetCards: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Hash: (NSString*) Hash NotIncludeRemoved: (BOOL)NotIncludeRemoved NotIncludeNotAuthorized: (BOOL)NotIncludeNotAuthorized;

	// Returns svcWSResponse*
	/* Регистрация карты на устройстве */
	- (SoapRequest*) RegisterCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardName: (NSString*) cardName cardNumber: (NSString*) cardNumber cardType: (NSString*) cardType cardYear: (int) cardYear cardMonth: (int) cardMonth cardHolder: (NSString*) cardHolder;
	- (SoapRequest*) RegisterCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardName: (NSString*) cardName cardNumber: (NSString*) cardNumber cardType: (NSString*) cardType cardYear: (int) cardYear cardMonth: (int) cardMonth cardHolder: (NSString*) cardHolder;

	// Returns svcWSResponse*
	/* Удаление карты с устройства */
	- (SoapRequest*) RemoveCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;
	- (SoapRequest*) RemoveCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;

	// Returns svcWSResponse*
	/* Начало авторизации карты */
	- (SoapRequest*) BeginAuthorizeCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId cvc: (NSString*) cvc;
	- (SoapRequest*) BeginAuthorizeCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId cvc: (NSString*) cvc;

	// Returns svcWSResponse*
	/* Проверка состояния авторизации карты */
	- (SoapRequest*) CheckAuthorizeCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;
	- (SoapRequest*) CheckAuthorizeCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;

	// Returns svcWSResponse*
	/* Проверка состояния авторизации карты с 3D */
	- (SoapRequest*) CheckAuthorizeCardWith3D: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;
	- (SoapRequest*) CheckAuthorizeCardWith3D: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;

	// Returns svcWSResponse*
	/* Завершение авторизации карты */
	- (SoapRequest*) EndAuthorizeCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId authSum: (NSDecimalNumber*) authSum;
	- (SoapRequest*) EndAuthorizeCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId authSum: (NSDecimalNumber*) authSum;

	// Returns svcWSResponse*
	/* Получение статистики по карте */
	- (SoapRequest*) GetCardStat: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;
	- (SoapRequest*) GetCardStat: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;

    // Returns svcWSResponse*
    /* Получение статистики по карте */
    - (SoapRequest*) GetCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;
    - (SoapRequest*) GetCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId;

	// Returns svcWSResponse*
	/* Получение списка избранных платежей */
	- (SoapRequest*) GetFavorites: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Hash: (NSString*) Hash;
	- (SoapRequest*) GetFavorites: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Hash: (NSString*) Hash;

	// Returns svcWSResponse*
	/* Добавление записи в избранное */
	- (SoapRequest*) AddFavorite: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId favoriteName: (NSString*) favoriteName currency: (NSString*) currency currencyName: (NSString*) currencyName cardId: (int) cardId parameters: (NSString*) parameters summa: (NSDecimalNumber*) summa;
	- (SoapRequest*) AddFavorite: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId favoriteName: (NSString*) favoriteName currency: (NSString*) currency currencyName: (NSString*) currencyName cardId: (int) cardId parameters: (NSString*) parameters summa: (NSDecimalNumber*) summa;

	// Returns svcWSResponse*
	/* Изменение записи в избранном */
	- (SoapRequest*) ModifyFavorite: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId favoriteName: (NSString*) favoriteName cardId: (int) cardId parameters: (NSString*) parameters summa: (NSDecimalNumber*) summa;
	- (SoapRequest*) ModifyFavorite: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId favoriteName: (NSString*) favoriteName cardId: (int) cardId parameters: (NSString*) parameters summa: (NSDecimalNumber*) summa;

	// Returns svcWSResponse*
	/* Удаление записи из избранного */
	- (SoapRequest*) RemoveFavorite: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId;
	- (SoapRequest*) RemoveFavorite: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE favoriteId: (int) favoriteId;

	// Returns svcWSResponse*
	/* Сохранение сортировки записей в избранном */
	- (SoapRequest*) SaveFavoritesOrder: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE orderList: (NSString*) orderList;
	- (SoapRequest*) SaveFavoritesOrder: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE orderList: (NSString*) orderList;

	// Returns svcWSResponse*
	/* Получение каталога (для полного обновления надо передавать номер версии меньший нуля) */
	- (SoapRequest*) GetCatalog: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE version: (int) version;
	- (SoapRequest*) GetCatalog: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE version: (int) version;

    // Returns svcWSResponse*
    /* Получение каталога часто используемых методов платежа */
    - (SoapRequest*) GetTopCatalog: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
    - (SoapRequest*) GetTopCatalog: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

    // Returns svcWSResponse*
    /* Поиск методов платежа по каталогу */
    - (SoapRequest*) SearchCatalog: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Part: (NSString*) Part;
    - (SoapRequest*) SearchCatalog: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Part: (NSString*) Part;

    // Returns svcWSResponse*
	/* Получение параметров для совершения оплаты */
	- (SoapRequest*) GetParameters: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency;
	- (SoapRequest*) GetParameters: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency;

	// Returns svcWSResponse*
	/* Получение параметров для совершения оплаты счета */
	- (SoapRequest*) GetIncParameters: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency checkId: (int) checkId;
	- (SoapRequest*) GetIncParameters: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency checkId: (int) checkId;

	// Returns svcWSResponse*
	/* Получение состояния операции */
	- (SoapRequest*) GetOperationState: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;
	- (SoapRequest*) GetOperationState: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;

	// Returns svcWSResponse*
	/* Запуск операции на исполнение */
	- (SoapRequest*) StartOperation: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE cardId: (int) cardId summa: (NSDecimalNumber*) summa currency: (NSString*) currency parameters: (NSString*) parameters CVC: (NSString*) CVC;
	- (SoapRequest*) StartOperation: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE cardId: (int) cardId summa: (NSDecimalNumber*) summa currency: (NSString*) currency parameters: (NSString*) parameters CVC: (NSString*) CVC;

    // Returns svcWSResponse*
    /* Применение страничных параметров */
    - (SoapRequest*) ApproveParameters: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey parameters: (NSString*) parameters;
    - (SoapRequest*) ApproveParameters: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey parameters: (NSString*) parameters;

	// Returns svcWSResponse*
	/* Рассчитать сумму для операции (Если IsInc истина, то на выходе выходная сумма, иначе - входная сумма) */
	- (SoapRequest*) CalcSum: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency IsInc: (BOOL) IsInc summ: (NSDecimalNumber*) summ;
	- (SoapRequest*) CalcSum: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency IsInc: (BOOL) IsInc summ: (NSDecimalNumber*) summ;

	// Returns svcWSResponse*
	/* Рассчитать сумму для операции относительно метода платежа (Если IsInc истина, то на выходе выходная сумма, иначе - входная сумма) */
	- (SoapRequest*) CalcSumWithCard: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency IsInc: (BOOL) IsInc summ: (NSDecimalNumber*) summ cardId: (int) cardId;
	- (SoapRequest*) CalcSumWithCard: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency IsInc: (BOOL) IsInc summ: (NSDecimalNumber*) summ cardId: (int) cardId;

	// Returns svcWSResponse*
	/* Привязка координат к операции */
	- (SoapRequest*) UpdateOperationGPS: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey Latitude: (NSDecimalNumber*) Latitude Longtitude: (NSDecimalNumber*) Longtitude;
	- (SoapRequest*) UpdateOperationGPS: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey Latitude: (NSDecimalNumber*) Latitude Longtitude: (NSDecimalNumber*) Longtitude;

	// Returns svcWSResponse*
	/* Отправка сообщения в службу поддержки */
	- (SoapRequest*) SendMessageToSupport: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Subject: (NSString*) Subject Body: (NSString*) Body;
	- (SoapRequest*) SendMessageToSupport: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Subject: (NSString*) Subject Body: (NSString*) Body;

	// Returns svcWSResponse*
	/* Отправка сообщения в службу поддержки с ключем операции */
	- (SoapRequest*) StoreMessageToSupport: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Subject: (NSString*) Subject Body: (NSString*) Body OpKey: (NSString*) OpKey;
	- (SoapRequest*) StoreMessageToSupport: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Subject: (NSString*) Subject Body: (NSString*) Body OpKey: (NSString*) OpKey;

	// Returns svcWSResponse*
	/* Получение информационных сообщений */
	- (SoapRequest*) GetMessages: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;
	- (SoapRequest*) GetMessages: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;

	// Returns svcWSResponse*
	/* Получение истории операций */
	- (SoapRequest*) GetHistory: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;
	- (SoapRequest*) GetHistory: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;


    // Returns svcWSResponse*
    /* Получение истории операций относительно указанного op_Id */
    - (SoapRequest*) GetHistoryFromId: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Id: (int) Id Count: (int) Count;
    - (SoapRequest*) GetHistoryFromId: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Id: (int) Id Count: (int) Count;

	// Returns svcWSResponse*
	/* Оплата счёта */
	- (SoapRequest*) PayCheck: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE checkId: (int) checkId cardId: (int) cardId CVC: (NSString*) CVC;
	- (SoapRequest*) PayCheck: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE checkId: (int) checkId cardId: (int) cardId CVC: (NSString*) CVC;

	// Returns svcWSResponse*
	/* Создание счёта */
	- (SoapRequest*) CreateCheck: (id <SoapDelegate>) handler OpKey: (NSString*) OpKey Phone: (NSString*) Phone MerchantName: (NSString*) MerchantName MerchantOrder: (NSString*) MerchantOrder Sum: (NSDecimalNumber*) Sum;
	- (SoapRequest*) CreateCheck: (id) target action: (SEL) action OpKey: (NSString*) OpKey Phone: (NSString*) Phone MerchantName: (NSString*) MerchantName MerchantOrder: (NSString*) MerchantOrder Sum: (NSDecimalNumber*) Sum;

	// Returns svcWSResponse*
	/* Отказ от оплаты счёта */
	- (SoapRequest*) DeclineCheck: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE checkId: (int) checkId;
	- (SoapRequest*) DeclineCheck: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE checkId: (int) checkId;

	// Returns svcWSResponse*
	/* Получить детализацию счёта */
	- (SoapRequest*) GetCheck: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE checkId: (int) checkId;
	- (SoapRequest*) GetCheck: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE checkId: (int) checkId;

	// Returns svcWSResponse*
	/* Получить счёта */
	- (SoapRequest*) GetChecks: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) GetChecks: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Создание просканированного счёта */
	- (SoapRequest*) CreateCheckByOpKey: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;
	- (SoapRequest*) CreateCheckByOpKey: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE OpKey: (NSString*) OpKey;

	// Returns svcWSResponse*
	/* Оплата счёта */
	- (SoapRequest*) PayCheckWithCurrency: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE checkId: (int) checkId currency: (NSString*) currency parameters: (NSString*) parameters;
	- (SoapRequest*) PayCheckWithCurrency: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE checkId: (int) checkId currency: (NSString*) currency parameters: (NSString*) parameters;

	// Returns svcWSResponse*
	/* Проверяет корректность суммы в звисимости от карты для устройства */
	- (SoapRequest*) CheckSum: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency OutSumm: (NSDecimalNumber*) OutSumm card_Id: (int) card_Id;
	- (SoapRequest*) CheckSum: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE currency: (NSString*) currency OutSumm: (NSDecimalNumber*) OutSumm card_Id: (int) card_Id;

	// Returns svcWSResponse*
	/* Получить каталог магазинов */
	- (SoapRequest*) GetShopCatalog: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE;
	- (SoapRequest*) GetShopCatalog: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE;

	// Returns svcWSResponse*
	/* Получить список магазинов в ветке каталога */
	- (SoapRequest*) GetShopsInCatalog: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE catalogId: (int) catalogId;
	- (SoapRequest*) GetShopsInCatalog: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE catalogId: (int) catalogId;

	// Returns svcWSResponse*
	/* Получить терминалы рядом с указанными координатами */
	- (SoapRequest*) GetTerminalsNearCoord: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Latitude: (NSDecimalNumber*) Latitude Longtitude: (NSDecimalNumber*) Longtitude Delta: (NSDecimalNumber*) Delta;
	- (SoapRequest*) GetTerminalsNearCoord: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Latitude: (NSDecimalNumber*) Latitude Longtitude: (NSDecimalNumber*) Longtitude Delta: (NSDecimalNumber*) Delta;

	// Returns svcWSResponse*
	/* Получить изменения в терминалах */
	- (SoapRequest*) GetTerminals: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;
	- (SoapRequest*) GetTerminals: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;

	// Returns svcWSResponse*
	/* Получить данные по программе благотворительности */
	- (SoapRequest*) GetCharity: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE charityId: (int) charityId;
	- (SoapRequest*) GetCharity: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE charityId: (int) charityId;

	// Returns svcWSResponse*
	/* Принять пожертвование */
	- (SoapRequest*) PayCharity: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE charityId: (int) charityId cardId: (int) cardId summa: (NSDecimalNumber*) summa CVC: (NSString*) CVC PayerFIO: (NSString*) PayerFIO PayerAddress: (NSString*) PayerAddress;
	- (SoapRequest*) PayCharity: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE charityId: (int) charityId cardId: (int) cardId summa: (NSDecimalNumber*) summa CVC: (NSString*) CVC PayerFIO: (NSString*) PayerFIO PayerAddress: (NSString*) PayerAddress;

	// Returns svcWSResponse*
	/* Получение валюты по номеру телефона */
	- (SoapRequest*) GetCurrencyByPhone: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Phone: (NSString*) Phone;
	- (SoapRequest*) GetCurrencyByPhone: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Phone: (NSString*) Phone;

	// Returns svcWSResponse*
	/* Покупка/пополнение виртуальной карты банка ОКЕАН */
	- (SoapRequest*) VISAVirtuonCharge: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE virtuonId: (int) virtuonId FIO: (NSString*) FIO Summa: (NSDecimalNumber*) Summa Phone: (NSString*) Phone EMail: (NSString*) EMail cardId: (int) cardId CVC: (NSString*) CVC;
	- (SoapRequest*) VISAVirtuonCharge: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE virtuonId: (int) virtuonId FIO: (NSString*) FIO Summa: (NSDecimalNumber*) Summa Phone: (NSString*) Phone EMail: (NSString*) EMail cardId: (int) cardId CVC: (NSString*) CVC;

	// Returns svcWSResponse*
	/* Получение списка операторов зарубежных мобильных телефонов */
	- (SoapRequest*) GetRoumingMobileOperators: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;
	- (SoapRequest*) GetRoumingMobileOperators: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE TIMESTAMP: (NSString*) TIMESTAMP;

    // Returns svcWSResponse*
    /* Перевод с карты не карту */
    - (SoapRequest*) Card2CardTransfer: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE fromCardId: (int) fromCardId toCardId: (int) toCardId toCardNumber: (NSString *) toCardNumber summ: (NSDecimalNumber*) summ fromCardCVC : (NSString *) fromCardCVC;
    - (SoapRequest*) Card2CardTransfer: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE fromCardId: (int) fromCardId toCardId: (int) toCardId toCardNumber: (NSString *) toCardNumber summ: (NSDecimalNumber*) summ fromCardCVC : (NSString *) fromCardCVC;

	// Returns svcWSResponse*
	/* Авторизация в личном кабинете */
	- (SoapRequest*) Login: (id <SoapDelegate>) handler UNIQUE: (NSString*) UNIQUE Login: (NSString*) Login Password: (NSString*) Password;
	- (SoapRequest*) Login: (id) target action: (SEL) action UNIQUE: (NSString*) UNIQUE Login: (NSString*) Login Password: (NSString*) Password;

		
	+ (svcWSMobileBANK*) service;
	+ (svcWSMobileBANK*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password;
@end
	