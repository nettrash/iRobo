/*
	svcOperationState.h
	The implementation of properties and methods for the svcOperationState object.
	Generated by SudzC.com
*/
#import "svcOperationState.h"

#import "svcArrayOfString.h"
#import "svcRedirectTo.h"
@implementation svcOperationState
	@synthesize Process = _Process;
	@synthesize State = _State;
	@synthesize IsComplete = _IsComplete;
	@synthesize Comments = _Comments;
	@synthesize Redirect = _Redirect;
	@synthesize Text = _Text;
	@synthesize inFavorites = _inFavorites;
	@synthesize rollBackIsPossible = _rollBackIsPossible;
	@synthesize inputDone = _inputDone;
	@synthesize RedirectURL = _RedirectURL;

	- (id) init
	{
		if(self = [super init])
		{
			self.Process = nil;
			self.State = nil;
			self.Comments = [[NSMutableArray alloc] init];
			self.Redirect = nil; // [[svcRedirectTo alloc] init];
			self.Text = nil;
			self.RedirectURL = nil;

		}
		return self;
	}

	+ (svcOperationState*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Process = [Soap getNodeValue: node withName: @"Process"];
			self.State = [Soap getNodeValue: node withName: @"State"];
			self.IsComplete = [[Soap getNodeValue: node withName: @"IsComplete"] boolValue];
			self.Comments = [[svcArrayOfString createWithNode: [Soap getNode: node withName: @"Comments"]] object];
			self.Redirect = [[svcRedirectTo createWithNode: [Soap getNode: node withName: @"Redirect"]] object];
			self.Text = [Soap getNodeValue: node withName: @"Text"];
			self.inFavorites = [[Soap getNodeValue: node withName: @"inFavorites"] boolValue];
			self.rollBackIsPossible = [[Soap getNodeValue: node withName: @"rollBackIsPossible"] boolValue];
			self.inputDone = [[Soap getNodeValue: node withName: @"inputDone"] boolValue];
			self.RedirectURL = [Soap getNodeValue: node withName: @"RedirectURL"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"OperationState"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.Process != nil) [s appendFormat: @"<Process>%@</Process>", [[self.Process stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.State != nil) [s appendFormat: @"<State>%@</State>", [[self.State stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<IsComplete>%@</IsComplete>", (self.IsComplete)?@"true":@"false"];
		if (self.Comments != nil && self.Comments.count > 0) {
			[s appendFormat: @"<Comments>%@</Comments>", [svcArrayOfString serialize: self.Comments]];
		} else {
			[s appendString: @"<Comments/>"];
		}
		if (self.Redirect != nil) [s appendString: [self.Redirect serialize: @"Redirect"]];
		if (self.Text != nil) [s appendFormat: @"<Text>%@</Text>", [[self.Text stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<inFavorites>%@</inFavorites>", (self.inFavorites)?@"true":@"false"];
		[s appendFormat: @"<rollBackIsPossible>%@</rollBackIsPossible>", (self.rollBackIsPossible)?@"true":@"false"];
		[s appendFormat: @"<inputDone>%@</inputDone>", (self.inputDone)?@"true":@"false"];
		if (self.RedirectURL != nil) [s appendFormat: @"<RedirectURL>%@</RedirectURL>", [[self.RedirectURL stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[svcOperationState class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
