/*
	svcCheck.h
	The implementation of properties and methods for the svcCheck object.
	Generated by SudzC.com
*/
#import "svcCheck.h"

#import "svcCard.h"
#import "svcArrayOfCurrency.h"
@implementation svcCheck
	@synthesize UNIQUE = _UNIQUE;
	@synthesize checkId = _checkId;
	@synthesize card = _card;
	@synthesize CVC = _CVC;
	@synthesize OpKey = _OpKey;
	@synthesize Summa = _Summa;
	@synthesize MerchantName = _MerchantName;
	@synthesize MerchantOrder = _MerchantOrder;
	@synthesize RegDate = _RegDate;
	@synthesize State = _State;
	@synthesize MerchantID = _MerchantID;
	@synthesize IsYandexEnabled = _IsYandexEnabled;
	@synthesize AdditionalCurrencies = _AdditionalCurrencies;

	- (id) init
	{
		if(self = [super init])
		{
			self.UNIQUE = nil;
			self.card = nil; // [[svcCard alloc] init];
			self.CVC = nil;
			self.OpKey = nil;
			self.Summa = nil;
			self.MerchantName = nil;
			self.MerchantOrder = nil;
			self.RegDate = nil;
			self.State = nil;
			self.AdditionalCurrencies = [[NSMutableArray alloc] init];

		}
		return self;
	}

	+ (svcCheck*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.UNIQUE = [Soap getNodeValue: node withName: @"UNIQUE"];
			self.checkId = [[Soap getNodeValue: node withName: @"checkId"] intValue];
			self.card = [[svcCard createWithNode: [Soap getNode: node withName: @"card"]] object];
			self.CVC = [Soap getNodeValue: node withName: @"CVC"];
			self.OpKey = [Soap getNodeValue: node withName: @"OpKey"];
			self.Summa = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Summa"]];
			self.MerchantName = [Soap getNodeValue: node withName: @"MerchantName"];
			self.MerchantOrder = [Soap getNodeValue: node withName: @"MerchantOrder"];
			self.RegDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"RegDate"]];
			self.State = [Soap getNodeValue: node withName: @"State"];
			self.MerchantID = [[Soap getNodeValue: node withName: @"MerchantID"] intValue];
			self.IsYandexEnabled = [[Soap getNodeValue: node withName: @"IsYandexEnabled"] boolValue];
			self.AdditionalCurrencies = [[svcArrayOfCurrency createWithNode: [Soap getNode: node withName: @"AdditionalCurrencies"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"Check"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.UNIQUE != nil) [s appendFormat: @"<UNIQUE>%@</UNIQUE>", [[self.UNIQUE stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<checkId>%@</checkId>", [NSString stringWithFormat: @"%i", self.checkId]];
		if (self.card != nil) [s appendString: [self.card serialize: @"card"]];
		if (self.CVC != nil) [s appendFormat: @"<CVC>%@</CVC>", [[self.CVC stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.OpKey != nil) [s appendFormat: @"<OpKey>%@</OpKey>", [[self.OpKey stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Summa != nil) [s appendFormat: @"<Summa>%@</Summa>", [NSString stringWithFormat: @"%@", self.Summa]];
		if (self.MerchantName != nil) [s appendFormat: @"<MerchantName>%@</MerchantName>", [[self.MerchantName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.MerchantOrder != nil) [s appendFormat: @"<MerchantOrder>%@</MerchantOrder>", [[self.MerchantOrder stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RegDate != nil) [s appendFormat: @"<RegDate>%@</RegDate>", [Soap getDateString: self.RegDate]];
		if (self.State != nil) [s appendFormat: @"<State>%@</State>", [[self.State stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<MerchantID>%@</MerchantID>", [NSString stringWithFormat: @"%i", self.MerchantID]];
		[s appendFormat: @"<IsYandexEnabled>%@</IsYandexEnabled>", (self.IsYandexEnabled)?@"true":@"false"];
		if (self.AdditionalCurrencies != nil && self.AdditionalCurrencies.count > 0) {
			[s appendFormat: @"<AdditionalCurrencies>%@</AdditionalCurrencies>", [svcArrayOfCurrency serialize: self.AdditionalCurrencies]];
		} else {
			[s appendString: @"<AdditionalCurrencies/>"];
		}

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[svcCheck class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
