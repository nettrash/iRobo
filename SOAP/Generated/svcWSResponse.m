/*
	svcWSResponse.h
	The implementation of properties and methods for the svcWSResponse object.
	Generated by SudzC.com
*/
#import "svcWSResponse.h"

#import "svcArrayOfMessage.h"
#import "svcSettings.h"
#import "svcArrayOfDeviceStatItem.h"
#import "svcArrayOfCard.h"
#import "svcCardStat.h"
#import "svcArrayOfFavorite.h"
#import "svcArrayOfCurrency.h"
#import "svcArrayOfParameter.h"
#import "svcArrayOfTopCurrency.h"
#import "svcArrayOfRoumingMobileOperator.h"
#import "svcOperationState.h"
#import "svcArrayOfHistoryOperation.h"
#import "svcArrayOfCheck.h"
#import "svcArrayOfShopCatalogItem.h"
#import "svcArrayOfShopItem.h"
#import "svcArrayOfTerminal.h"
#import "svcCharity.h"
@implementation svcWSResponse
	@synthesize messages = _messages;
	@synthesize messagesVersion = _messagesVersion;
	@synthesize result = _result;
	@synthesize errortext = _errortext;
	@synthesize exceptiontext = _exceptiontext;
	@synthesize showerror = _showerror;
	@synthesize errorcode = _errorcode;
	@synthesize version = _version;
	@synthesize versionURL = _versionURL;
	@synthesize versionText = _versionText;
	@synthesize minVersion = _minVersion;
	@synthesize settings = _settings;
	@synthesize deviceStat = _deviceStat;
	@synthesize card_Id = _card_Id;
	@synthesize cards = _cards;
	@synthesize cards_Hash = _cards_Hash;
	@synthesize cardStat = _cardStat;
	@synthesize authNeed3D = _authNeed3D;
	@synthesize authCdId = _authCdId;
	@synthesize authMode = _authMode;
	@synthesize authState = _authState;
	@synthesize authComplete = _authComplete;
	@synthesize authRequestSum = _authRequestSum;
	@synthesize favorite_Id = _favorite_Id;
	@synthesize favorites = _favorites;
	@synthesize favoritesVersion = _favoritesVersion;
	@synthesize catalogVersion = _catalogVersion;
	@synthesize catalog = _catalog;
	@synthesize parameters = _parameters;
	@synthesize topcatalog = _topcatalog;
	@synthesize currency = _currency;
	@synthesize roumingMobileCatalog = _roumingMobileCatalog;
	@synthesize roumingMobileCatalogVersion = _roumingMobileCatalogVersion;
	@synthesize operationState = _operationState;
	@synthesize OpKey = _OpKey;
	@synthesize Summa = _Summa;
	@synthesize history = _history;
	@synthesize historyVersion = _historyVersion;
	@synthesize checks = _checks;
	@synthesize checksCount = _checksCount;
	@synthesize checkId = _checkId;
	@synthesize shopcatalog = _shopcatalog;
	@synthesize shops = _shops;
	@synthesize terminalsVersion = _terminalsVersion;
	@synthesize terminals = _terminals;
	@synthesize charity = _charity;
	@synthesize PersonAuthToken = _PersonAuthToken;
	@synthesize PersonID = _PersonID;

	- (id) init
	{
		if(self = [super init])
		{
			self.messages = [[NSMutableArray alloc] init];
			self.messagesVersion = nil;
			self.errortext = nil;
			self.exceptiontext = nil;
			self.errorcode = nil;
			self.version = nil;
			self.versionURL = nil;
			self.versionText = nil;
			self.settings = nil; // [[svcSettings alloc] init];
			self.deviceStat = [[NSMutableArray alloc] init];
			self.cards = [[NSMutableArray alloc] init];
			self.cards_Hash = nil;
			self.cardStat = nil; // [[svcCardStat alloc] init];
			self.authMode = nil;
			self.authState = nil;
			self.favorites = [[NSMutableArray alloc] init];
			self.favoritesVersion = nil;
			self.catalog = [[NSMutableArray alloc] init];
			self.parameters = [[NSMutableArray alloc] init];
			self.topcatalog = [[NSMutableArray alloc] init];
			self.currency = nil;
			self.roumingMobileCatalog = [[NSMutableArray alloc] init];
			self.roumingMobileCatalogVersion = nil;
			self.operationState = nil; // [[svcOperationState alloc] init];
			self.OpKey = nil;
			self.Summa = nil;
			self.history = [[NSMutableArray alloc] init];
			self.historyVersion = nil;
			self.checks = [[NSMutableArray alloc] init];
			self.shopcatalog = [[NSMutableArray alloc] init];
			self.shops = [[NSMutableArray alloc] init];
			self.terminalsVersion = nil;
			self.terminals = [[NSMutableArray alloc] init];
			self.charity = nil; // [[svcCharity alloc] init];
			self.PersonAuthToken = nil;
			self.PersonID = nil;

		}
		return self;
	}

	+ (svcWSResponse*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[self alloc] initWithNode: node];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.messages = [[svcArrayOfMessage createWithNode: [Soap getNode: node withName: @"messages"]] object];
			self.messagesVersion = [Soap getNodeValue: node withName: @"messagesVersion"];
			self.result = [[Soap getNodeValue: node withName: @"result"] boolValue];
			self.errortext = [Soap getNodeValue: node withName: @"errortext"];
			self.exceptiontext = [Soap getNodeValue: node withName: @"exceptiontext"];
			self.showerror = [[Soap getNodeValue: node withName: @"showerror"] boolValue];
			self.errorcode = [Soap getNodeValue: node withName: @"errorcode"];
			self.version = [Soap getNodeValue: node withName: @"version"];
			self.versionURL = [Soap getNodeValue: node withName: @"versionURL"];
			self.versionText = [Soap getNodeValue: node withName: @"versionText"];
			self.minVersion = [[Soap getNodeValue: node withName: @"minVersion"] intValue];
			self.settings = [[svcSettings createWithNode: [Soap getNode: node withName: @"settings"]] object];
			self.deviceStat = [[svcArrayOfDeviceStatItem createWithNode: [Soap getNode: node withName: @"deviceStat"]] object];
			self.card_Id = [[Soap getNodeValue: node withName: @"card_Id"] intValue];
			self.cards = [[svcArrayOfCard createWithNode: [Soap getNode: node withName: @"cards"]] object];
			self.cards_Hash = [Soap getNodeValue: node withName: @"cards_Hash"];
			self.cardStat = [[svcCardStat createWithNode: [Soap getNode: node withName: @"cardStat"]] object];
			self.authNeed3D = [[Soap getNodeValue: node withName: @"authNeed3D"] boolValue];
			self.authCdId = [[Soap getNodeValue: node withName: @"authCdId"] intValue];
			self.authMode = [Soap getNodeValue: node withName: @"authMode"];
			self.authState = [Soap getNodeValue: node withName: @"authState"];
			self.authComplete = [[Soap getNodeValue: node withName: @"authComplete"] boolValue];
			self.authRequestSum = [[Soap getNodeValue: node withName: @"authRequestSum"] boolValue];
			self.favorite_Id = [[Soap getNodeValue: node withName: @"favorite_Id"] intValue];
			self.favorites = [[svcArrayOfFavorite createWithNode: [Soap getNode: node withName: @"favorites"]] object];
			self.favoritesVersion = [Soap getNodeValue: node withName: @"favoritesVersion"];
			self.catalogVersion = [[Soap getNodeValue: node withName: @"catalogVersion"] intValue];
			self.catalog = [[svcArrayOfCurrency createWithNode: [Soap getNode: node withName: @"catalog"]] object];
			self.parameters = [[svcArrayOfParameter createWithNode: [Soap getNode: node withName: @"parameters"]] object];
			self.topcatalog = [[svcArrayOfTopCurrency createWithNode: [Soap getNode: node withName: @"topcatalog"]] object];
			self.currency = [Soap getNodeValue: node withName: @"currency"];
			self.roumingMobileCatalog = [[svcArrayOfRoumingMobileOperator createWithNode: [Soap getNode: node withName: @"roumingMobileCatalog"]] object];
			self.roumingMobileCatalogVersion = [Soap getNodeValue: node withName: @"roumingMobileCatalogVersion"];
			self.operationState = [[svcOperationState createWithNode: [Soap getNode: node withName: @"operationState"]] object];
			self.OpKey = [Soap getNodeValue: node withName: @"OpKey"];
			self.Summa = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"Summa"]];
			self.history = [[svcArrayOfHistoryOperation createWithNode: [Soap getNode: node withName: @"history"]] object];
			self.historyVersion = [Soap getNodeValue: node withName: @"historyVersion"];
			self.checks = [[svcArrayOfCheck createWithNode: [Soap getNode: node withName: @"checks"]] object];
			self.checksCount = [[Soap getNodeValue: node withName: @"checksCount"] intValue];
			self.checkId = [[Soap getNodeValue: node withName: @"checkId"] intValue];
			self.shopcatalog = [[svcArrayOfShopCatalogItem createWithNode: [Soap getNode: node withName: @"shopcatalog"]] object];
			self.shops = [[svcArrayOfShopItem createWithNode: [Soap getNode: node withName: @"shops"]] object];
			self.terminalsVersion = [Soap getNodeValue: node withName: @"terminalsVersion"];
			self.terminals = [[svcArrayOfTerminal createWithNode: [Soap getNode: node withName: @"terminals"]] object];
			self.charity = [[svcCharity createWithNode: [Soap getNode: node withName: @"charity"]] object];
			self.PersonAuthToken = [Soap getNodeValue: node withName: @"PersonAuthToken"];
			self.PersonID = [Soap getNodeValue: node withName: @"PersonID"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"WSResponse"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.messages != nil && self.messages.count > 0) {
			[s appendFormat: @"<messages>%@</messages>", [svcArrayOfMessage serialize: self.messages]];
		} else {
			[s appendString: @"<messages/>"];
		}
		if (self.messagesVersion != nil) [s appendFormat: @"<messagesVersion>%@</messagesVersion>", [[self.messagesVersion stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<result>%@</result>", (self.result)?@"true":@"false"];
		if (self.errortext != nil) [s appendFormat: @"<errortext>%@</errortext>", [[self.errortext stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.exceptiontext != nil) [s appendFormat: @"<exceptiontext>%@</exceptiontext>", [[self.exceptiontext stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<showerror>%@</showerror>", (self.showerror)?@"true":@"false"];
		if (self.errorcode != nil) [s appendFormat: @"<errorcode>%@</errorcode>", [[self.errorcode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.version != nil) [s appendFormat: @"<version>%@</version>", [[self.version stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.versionURL != nil) [s appendFormat: @"<versionURL>%@</versionURL>", [[self.versionURL stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.versionText != nil) [s appendFormat: @"<versionText>%@</versionText>", [[self.versionText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<minVersion>%@</minVersion>", [NSString stringWithFormat: @"%i", self.minVersion]];
		if (self.settings != nil) [s appendString: [self.settings serialize: @"settings"]];
		if (self.deviceStat != nil && self.deviceStat.count > 0) {
			[s appendFormat: @"<deviceStat>%@</deviceStat>", [svcArrayOfDeviceStatItem serialize: self.deviceStat]];
		} else {
			[s appendString: @"<deviceStat/>"];
		}
		[s appendFormat: @"<card_Id>%@</card_Id>", [NSString stringWithFormat: @"%i", self.card_Id]];
		if (self.cards != nil && self.cards.count > 0) {
			[s appendFormat: @"<cards>%@</cards>", [svcArrayOfCard serialize: self.cards]];
		} else {
			[s appendString: @"<cards/>"];
		}
		if (self.cards_Hash != nil) [s appendFormat: @"<cards_Hash>%@</cards_Hash>", [[self.cards_Hash stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.cardStat != nil) [s appendString: [self.cardStat serialize: @"cardStat"]];
		[s appendFormat: @"<authNeed3D>%@</authNeed3D>", (self.authNeed3D)?@"true":@"false"];
		[s appendFormat: @"<authCdId>%@</authCdId>", [NSString stringWithFormat: @"%i", self.authCdId]];
		if (self.authMode != nil) [s appendFormat: @"<authMode>%@</authMode>", [[self.authMode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.authState != nil) [s appendFormat: @"<authState>%@</authState>", [[self.authState stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<authComplete>%@</authComplete>", (self.authComplete)?@"true":@"false"];
		[s appendFormat: @"<authRequestSum>%@</authRequestSum>", (self.authRequestSum)?@"true":@"false"];
		[s appendFormat: @"<favorite_Id>%@</favorite_Id>", [NSString stringWithFormat: @"%i", self.favorite_Id]];
		if (self.favorites != nil && self.favorites.count > 0) {
			[s appendFormat: @"<favorites>%@</favorites>", [svcArrayOfFavorite serialize: self.favorites]];
		} else {
			[s appendString: @"<favorites/>"];
		}
		if (self.favoritesVersion != nil) [s appendFormat: @"<favoritesVersion>%@</favoritesVersion>", [[self.favoritesVersion stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<catalogVersion>%@</catalogVersion>", [NSString stringWithFormat: @"%i", self.catalogVersion]];
		if (self.catalog != nil && self.catalog.count > 0) {
			[s appendFormat: @"<catalog>%@</catalog>", [svcArrayOfCurrency serialize: self.catalog]];
		} else {
			[s appendString: @"<catalog/>"];
		}
		if (self.parameters != nil && self.parameters.count > 0) {
			[s appendFormat: @"<parameters>%@</parameters>", [svcArrayOfParameter serialize: self.parameters]];
		} else {
			[s appendString: @"<parameters/>"];
		}
		if (self.topcatalog != nil && self.topcatalog.count > 0) {
			[s appendFormat: @"<topcatalog>%@</topcatalog>", [svcArrayOfTopCurrency serialize: self.topcatalog]];
		} else {
			[s appendString: @"<topcatalog/>"];
		}
		if (self.currency != nil) [s appendFormat: @"<currency>%@</currency>", [[self.currency stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.roumingMobileCatalog != nil && self.roumingMobileCatalog.count > 0) {
			[s appendFormat: @"<roumingMobileCatalog>%@</roumingMobileCatalog>", [svcArrayOfRoumingMobileOperator serialize: self.roumingMobileCatalog]];
		} else {
			[s appendString: @"<roumingMobileCatalog/>"];
		}
		if (self.roumingMobileCatalogVersion != nil) [s appendFormat: @"<roumingMobileCatalogVersion>%@</roumingMobileCatalogVersion>", [[self.roumingMobileCatalogVersion stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.operationState != nil) [s appendString: [self.operationState serialize: @"operationState"]];
		if (self.OpKey != nil) [s appendFormat: @"<OpKey>%@</OpKey>", [[self.OpKey stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.Summa != nil) [s appendFormat: @"<Summa>%@</Summa>", [NSString stringWithFormat: @"%@", self.Summa]];
		if (self.history != nil && self.history.count > 0) {
			[s appendFormat: @"<history>%@</history>", [svcArrayOfHistoryOperation serialize: self.history]];
		} else {
			[s appendString: @"<history/>"];
		}
		if (self.historyVersion != nil) [s appendFormat: @"<historyVersion>%@</historyVersion>", [[self.historyVersion stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.checks != nil && self.checks.count > 0) {
			[s appendFormat: @"<checks>%@</checks>", [svcArrayOfCheck serialize: self.checks]];
		} else {
			[s appendString: @"<checks/>"];
		}
		[s appendFormat: @"<checksCount>%@</checksCount>", [NSString stringWithFormat: @"%i", self.checksCount]];
		[s appendFormat: @"<checkId>%@</checkId>", [NSString stringWithFormat: @"%i", self.checkId]];
		if (self.shopcatalog != nil && self.shopcatalog.count > 0) {
			[s appendFormat: @"<shopcatalog>%@</shopcatalog>", [svcArrayOfShopCatalogItem serialize: self.shopcatalog]];
		} else {
			[s appendString: @"<shopcatalog/>"];
		}
		if (self.shops != nil && self.shops.count > 0) {
			[s appendFormat: @"<shops>%@</shops>", [svcArrayOfShopItem serialize: self.shops]];
		} else {
			[s appendString: @"<shops/>"];
		}
		if (self.terminalsVersion != nil) [s appendFormat: @"<terminalsVersion>%@</terminalsVersion>", [[self.terminalsVersion stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.terminals != nil && self.terminals.count > 0) {
			[s appendFormat: @"<terminals>%@</terminals>", [svcArrayOfTerminal serialize: self.terminals]];
		} else {
			[s appendString: @"<terminals/>"];
		}
		if (self.charity != nil) [s appendString: [self.charity serialize: @"charity"]];
		if (self.PersonAuthToken != nil) [s appendFormat: @"<PersonAuthToken>%@</PersonAuthToken>", [[self.PersonAuthToken stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PersonID != nil) [s appendFormat: @"<PersonID>%@</PersonID>", [[self.PersonID stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[svcWSResponse class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}

@end
